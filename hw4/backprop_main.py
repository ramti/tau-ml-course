import backprop_dataimport backprop_networkimport numpy as npimport seaborn as snsimport pandas as pdimport matplotlib.pyplot as pltdef sectionA():    training_data, test_data = backprop_data.load(train_size=10000, test_size=5000)    net = backprop_network.Network([784, 40, 10])    net.SGD(training_data, epochs=30, mini_batch_size=10, learning_rate=0.1, test_data=test_data)def sectionB():    training_data, test_data = backprop_data.load(train_size=10000, test_size=5000)    n_epochs = 30    learning_rates = [0.001, 0.01, 0.1, 1, 10, 100]    train_acc = [None] * len(learning_rates)    test_acc = [None] * len(learning_rates)    train_loss = [None] * len(learning_rates)    for i, learning_rate in enumerate(learning_rates):        net = backprop_network.Network([784, 40, 10])        train_acc[i], test_acc[i], train_loss[i] = net.SGD(training_data,                                                           epochs=n_epochs,                                                           mini_batch_size=10,                                                           learning_rate=learning_rate,                                                           test_data=test_data)    # Plot train accuracy    data = pd.DataFrame(np.array(train_acc).T)    data.columns = learning_rates    data['Epoch'] = list(range(1, n_epochs + 1))    data = pd.melt(data, id_vars=['Epoch'], var_name="Rate", value_name="Accuracy")    data['Rate'] = pd.Categorical(data['Rate'])    plot = sns.lineplot(x='Epoch', y='Accuracy', hue='Rate', data=data)    plot.set(title='Train Accuracy')    plot.legend(loc='upper right')    plt.show()    # Plot test accuracy    data = pd.DataFrame(np.array(test_acc).T)    data.columns = learning_rates    data['Epoch'] = list(range(1, n_epochs + 1))    data = pd.melt(data, id_vars=['Epoch'], var_name="Rate", value_name="Accuracy")    data['Rate'] = pd.Categorical(data['Rate'])    plot = sns.lineplot(x='Epoch', y='Accuracy', hue='Rate', data=data)    plot.set(title='Test Accuracy')    plot.legend(loc='upper right')    plt.show()    # Plot training loss    data = pd.DataFrame(np.array(train_loss).T)    data.columns = learning_rates    data['Epoch'] = list(range(1, n_epochs + 1))    data = pd.melt(data, id_vars=['Epoch'], var_name="Rate", value_name="Loss")    data['Rate'] = pd.Categorical(data['Rate'])    plot = sns.lineplot(x='Epoch', y='Loss', hue='Rate', data=data)    plot.set(title='Train Loss')    plot.legend(loc='upper right')    plt.show()    print()def sectionC():    training_data, test_data = backprop_data.load(train_size=50000, test_size=10000)    net = backprop_network.Network([784, 40, 10])    net.SGD(training_data,            epochs=30,            mini_batch_size=10,            learning_rate=0.1,            test_data=test_data,            calc_train_acc=False,            calc_train_loss=False)if __name__ == "__main__":    sectionA()    sectionB()    sectionC()